import os
from typing import Callable, Optional

from modules.parlia.core.whisper_manager import is_model_loaded, transcribe
from modules.parlia.services.audioService import audio_service
from modules.parlia.services.parlia_data import (
    get_conclusion_text,
    get_include_conclusion,
)

# üì¶ Classe : WhisperService
#
# Ce service est responsable de la transcription audio via le mod√®le Whisper.
# Il est d√©clench√© uniquement par le TranscriptionPanel une fois l‚Äôenregistrement termin√©.
#
# Il utilise WhisperManager pour acc√©der au mod√®le charg√© et transcrire un fichier .wav.
# Il ne conna√Æt rien de l‚Äôinterface utilisateur (aucun appel direct √† l‚ÄôUI).
#
# üîπ Fonctionnement :
# - TranscriptionPanel appelle whisper_service.transcribe(audio_path, callback)
# - Le service v√©rifie que le mod√®le est charg√©
# - Lance la transcription avec WhisperManager
# - Une fois la transcription termin√©e :
#   - il appelle callback(transcribed_text) pour transmettre le texte
# - En cas d‚Äôerreur (pas de mod√®le, fichier introuvable, etc.), il appelle callback(None)
#
# La m√©thode transcribe() est synchrone pour l‚Äôinstant, mais peut √©voluer vers de l‚Äôasynchrone plus tard.
#
# üîπ √Ä venir :
# - Ajout automatique de la phrase de conclusion (si activ√©e)
# - Traitement des erreurs plus pr√©cis
# - Affichage de logs d√©taill√©s si n√©cessaire


# üß† M√©thode : transcribe(audio_path: str, callback: Callable[[Optional[str]], None])
#
# üî∏ Param√®tres :
# - audio_path : chemin vers le fichier .wav √† transcrire
# - callback : fonction √† appeler une fois la transcription termin√©e
#
# üî∏ √âtapes internes :
# - V√©rifie si WhisperManager a bien un mod√®le charg√© (is_model_loaded())
# - V√©rifie que le fichier existe
# - Lance la transcription via WhisperManager.transcribe(audio_path)
# - Transmet le texte r√©sultant au callback
# - En cas d‚Äôerreur (mod√®le non pr√™t ou fichier manquant), appelle callback(None)
#
# ‚ö†Ô∏è L‚ÄôUI (TranscriptionPanel) doit g√©rer la suite : affichage, erreur, etc.


class WhisperService:
    def transcribe(self, callback: Callable[[Optional[str]], None]):
        """
        Transcrit un fichier audio via WhisperManager et transmet le texte au callback.
        :param audio_path: Chemin vers le fichier .wav √† transcrire.
        :param callback: Fonction √† appeler une fois la transcription termin√©e.
        """
        audio_path = audio_service.get_last_audio_path()

        # V√©rifier si un mod√®le est charg√©
        if not is_model_loaded():
            print("[ERREUR] Aucun mod√®le charg√© dans WhisperManager.")
            callback(None)
            return

        # V√©rifier si le fichier audio existe
        if not os.path.exists(audio_path):
            print(f"[ERREUR] Fichier audio introuvable : {audio_path}")
            callback(None)
            return

        try:
            # Lancer la transcription
            print(f"[INFO] D√©but de la transcription pour : {audio_path}")
            transcribed_text = transcribe(audio_path)

            # Ajouter la phrase de conclusion si activ√©e
            if get_include_conclusion():
                conclusion_text = get_conclusion_text()
                if conclusion_text:
                    transcribed_text += f"\n\n{conclusion_text}"

            print("[INFO] Transcription termin√©e.")
            callback(transcribed_text)
        except Exception as e:
            print(f"[ERREUR] √âchec de la transcription : {e}")
            callback(None)


whisper_service = WhisperService()
