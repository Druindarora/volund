# üîÑ Module singleton pour g√©rer le mod√®le Whisper dans Parlia

# Ce fichier doit garantir qu‚Äôun seul mod√®le Whisper est charg√© √† la fois
# et que toutes les op√©rations passent par ce module centralis√©.

# -----------------------------------------------------------
# üíæ Variable interne pour stocker le mod√®le actuel
# - initialiser √† None au d√©marrage
# - ne jamais exposer directement en dehors de ce fichier

_current_model = None


# -----------------------------------------------------------
# üì• Fonction : load_model(name: str)
# - Si un mod√®le est d√©j√† charg√©, afficher un message et ignorer
# - Sinon, charger le mod√®le (simul√© ici) et le stocker dans _current_model
# - En dev, afficher quel mod√®le a √©t√© charg√©


def load_model(name: str):
    global _current_model
    if _current_model is not None:
        print(f"Un mod√®le est d√©j√† charg√© : {_current_model}. Ignorer la demande.")
        return

    # Simuler le chargement du mod√®le
    _current_model = f"Mod√®le charg√© : {name}"
    print(f"Mod√®le '{name}' charg√© avec succ√®s.")


# -----------------------------------------------------------
# üì§ Fonction : get_model() -> Any
# - Retourne l‚Äôobjet mod√®le actuel
# - Peut √™tre None si aucun mod√®le n‚Äôa encore √©t√© charg√©


def get_model():
    return _current_model


# -----------------------------------------------------------
# ‚ùå Fonction : unload_model()
# - D√©charge le mod√®le en cours (le remet √† None)
# - Affiche un message de confirmation


def unload_model():
    global _current_model
    if _current_model is None:
        print("Aucun mod√®le n'est actuellement charg√©.")
        return

    print(f"Mod√®le '{_current_model}' d√©charg√©.")
    _current_model = None


# -----------------------------------------------------------
# ‚úÖ Fonction : is_model_loaded() -> bool
# - Renvoie True si un mod√®le est d√©j√† charg√©, False sinon


def is_model_loaded():
    return _current_model is not None
