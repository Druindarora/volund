# üîÑ Module singleton pour g√©rer le mod√®le Whisper dans Parlia

# Ce fichier garantit qu‚Äôun seul mod√®le Whisper est charg√© √† la fois.
# Toutes les op√©rations de transcription passent par ici.

import os
from typing import Optional

import whisper  # Assure-toi d‚Äôavoir `openai-whisper` install√© via `pip install -U openai-whisper`

_current_model: Optional[whisper.Whisper] = None  # type: Optional[whisper.Whisper]


def load_model(model_path: str):
    """
    Charge un mod√®le Whisper depuis le fichier .pt ou .bin donn√©.
    Si un mod√®le est d√©j√† charg√©, il est ignor√©.
    """
    global _current_model

    if _current_model is not None:
        print(f"[INFO] Un mod√®le est d√©j√† charg√©. Ignorer la demande.")
        return

    if not os.path.exists(model_path):
        print(f"[ERREUR] Le mod√®le sp√©cifi√© est introuvable : {model_path}")
        return

    print(f"[INFO] Chargement du mod√®le Whisper depuis : {model_path}")
    _current_model = whisper.load_model(model_path)
    print(f"[INFO] Mod√®le charg√© avec succ√®s.")


def unload_model():
    """
    D√©charge le mod√®le actuellement charg√©.
    """
    global _current_model

    if _current_model is None:
        print("[INFO] Aucun mod√®le √† d√©charger.")
        return

    print(f"[INFO] D√©chargement du mod√®le.")
    _current_model = None


def is_model_loaded() -> bool:
    """
    Retourne True si un mod√®le est actuellement charg√©.
    """
    return _current_model is not None


def get_model():
    """
    Retourne l‚Äôinstance du mod√®le actuel.
    """
    return _current_model


def transcribe(audio_path: str) -> str:
    """
    Transcrit un fichier audio en texte via le mod√®le Whisper charg√©.
    """
    if _current_model is None:
        raise RuntimeError("Aucun mod√®le Whisper n'est charg√©.")

    print(f"[INFO] Lancement de la transcription r√©elle via Whisper.")
    result = _current_model.transcribe(audio_path)

    # Ajout d‚Äôun log pour v√©rification
    print("[DEBUG] R√©sultat brut de Whisper :", result)

    text = result.get("text", "")
    if isinstance(text, str):
        return text.strip()
    else:
        return ""
