# window_config.py

# Ce fichier g√®re la configuration de la fen√™tre principale de l'application V√∏lund :
# position (x, y) et taille (width, height) de la fen√™tre utilisateur.

# üì¶ Le fichier de configuration est un fichier JSON stock√© dans :
#    config/window_state.json

# ‚úÖ Comportement attendu :
# - Si le fichier existe : on lit les valeurs depuis ce fichier
# - Si le fichier n'existe pas : on le cr√©e automatiquement avec des valeurs par d√©faut
# - On fournit une fonction `load_window_state()` qui retourne un dictionnaire avec les cl√©s :
#     "x", "y", "width", "height"
# - On fournit une fonction `save_window_state(x, y, width, height)` qui enregistre la nouvelle configuration

# üìÇ Chemin du fichier :
# - Utiliser `os.path.join()` pour pointer vers le fichier : config/window_state.json
# - Le chemin doit √™tre relatif √† la racine du projet
# - Cr√©er le dossier `config/` s'il n'existe pas d√©j√† (avec `os.makedirs(..., exist_ok=True)`)

# üß© Valeurs par d√©faut :
# - x = 100
# - y = 100
# - width = 1000
# - height = 600
# Ces valeurs seront utilis√©es si le fichier n'existe pas ou est invalide

# üîÅ S√©curit√© :
# - Si le fichier JSON est vide ou corrompu, on doit revenir aux valeurs par d√©faut
# - Les fonctions doivent √™tre robustes aux erreurs d'ouverture/lecture/√©criture

# üîß Fonction 1 : load_window_state()
# - Retourne un dictionnaire avec les 4 cl√©s ("x", "y", "width", "height")
# - V√©rifie si le fichier existe
#     - Si oui : lit et parse le JSON
#     - Si non : cr√©e le fichier avec les valeurs par d√©faut et retourne celles-ci

# üîß Fonction 2 : save_window_state(x, y, width, height)
# - √âcrit dans le fichier JSON les nouvelles valeurs re√ßues
# - Le format du JSON doit √™tre lisible (indentation 4 espaces)

# ‚ùó√Ä ne pas oublier :
# - Toujours utiliser les modules standards : os, json
# - Pas de d√©pendances externes

# Exemple de structure retourn√©e :
# {
#     "x": 120,
#     "y": 80,
#     "width": 1280,
#     "height": 720
# }

# üëâ Copilot doit g√©n√©rer deux fonctions robustes et simples :
# - load_window_state()
# - save_window_state(x, y, width, height)

import json
import os


def load_window_state():
    # Chemin du fichier de configuration
    config_dir = os.path.join(os.getcwd(), "config")
    config_file = os.path.join(config_dir, "window_state.json")

    # Valeurs par d√©faut
    default_state = {"x": 100, "y": 100, "width": 1000, "height": 600}

    # V√©rifier si le fichier existe
    if not os.path.exists(config_file):
        # Cr√©er le dossier si n√©cessaire
        os.makedirs(config_dir, exist_ok=True)
        # √âcrire les valeurs par d√©faut dans le fichier
        with open(config_file, "w") as f:
            json.dump(default_state, f, indent=4)
        return default_state

    # Lire le fichier JSON
    try:
        with open(config_file, "r") as f:
            data = json.load(f)
            # V√©rifier que toutes les cl√©s n√©cessaires sont pr√©sentes
            if all(key in data for key in ["x", "y", "width", "height"]):
                return data
    except (json.JSONDecodeError, IOError):
        pass

    # En cas d'erreur ou de fichier corrompu, retourner les valeurs par d√©faut
    return default_state


def save_window_state(x, y, width, height):
    # Chemin du fichier de configuration
    config_dir = os.path.join(os.getcwd(), "config")
    config_file = os.path.join(config_dir, "window_state.json")

    # Cr√©er le dossier si n√©cessaire
    os.makedirs(config_dir, exist_ok=True)

    # √âcrire les nouvelles valeurs dans le fichier JSON
    state = {"x": x, "y": y, "width": width, "height": height}
    with open(config_file, "w") as f:
        json.dump(state, f, indent=4)
